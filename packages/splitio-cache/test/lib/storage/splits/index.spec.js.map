{"version":3,"sources":["../../../es6/storage/splits/index.spec.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,IAAM,OAAO,QAAQ,MAAR,CAAP;AACN,IAAM,gBAAgB,QAAQ,gCAAR,CAAhB;;AAEN,IAAM,eAAe,QAAQ,+BAAR,EAAyC,KAAzC;;AAErB,IAAM,KAAK,aAAa,QAAQ,kBAAR,CAAb,CAAL;AACN,IAAM,KAAK,aAAa,QAAQ,kBAAR,CAAb,CAAL;AACN,IAAM,KAAK,aAAa,QAAQ,kBAAR,CAAb,CAAL;AACN,IAAM,iBAAiB,6DAClB,GAAG,WAAH,sCACA,GAAG,WAAH,sCACA,GAAG,WAAH,IAHkB,CAAjB;;AAMN,KAAK,+DAAL,EAAsE,kBAAU;AAC9E,MAAM,UAAU,IAAI,aAAJ,EAAV,CADwE;;AAG9E,UAAQ,MAAR,CAAe,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAf,EAH8E;;AAK9E,MAAI,mBAAmB,IAAnB,CAL0E;;;;;;AAM9E,oDAAoB,QAAQ,WAAR,UAApB,oGAA2C;UAAlC,sBAAkC;;AACzC,yBAAmB,oBAAoB,eAAe,GAAf,CAAmB,OAAnB,CAApB,CADsB;KAA3C;;;;;;;;;;;;;;;;;GAN8E;;AAa9E,SAAO,IAAP,CAAY,gBAAZ,EAA8B,0CAA9B,EAb8E;AAc9E,SAAO,GAAP,GAd8E;CAAV,CAAtE;;AAiBA,KAAK,oCAAL,EAA2C,kBAAU;AACnD,MAAM,UAAU,IAAI,aAAJ,EAAV,CAD6C;;AAGnD,UAAQ,MAAR,CAAe,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAf,EAHmD;;AAKnD,SAAO,KAAP,CAAa,QAAQ,GAAR,CAAY,WAAZ,CAAb,EAAuC,EAAvC,EAA2C,2BAA3C,EALmD;AAMnD,SAAO,KAAP,CAAa,QAAQ,GAAR,CAAY,WAAZ,CAAb,EAAuC,EAAvC,EAA2C,2BAA3C,EANmD;AAOnD,SAAO,KAAP,CAAa,QAAQ,GAAR,CAAY,WAAZ,CAAb,EAAuC,EAAvC,EAA2C,2BAA3C,EAPmD;AAQnD,SAAO,GAAP,GARmD;CAAV,CAA3C","file":"index.spec.js","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nconst tape = require('tape');\nconst SplitsStorage = require('../../../../lib/storage/splits');\n\nconst SplitFactory = require('@splitsoftware/splitio-engine').parse;\n\nconst s1 = SplitFactory(require('./mocks/01.split'));\nconst s2 = SplitFactory(require('./mocks/02.split'));\nconst s3 = SplitFactory(require('./mocks/03.split'));\nconst mergedSegments = new Set([\n  ...s1.getSegments(),\n  ...s2.getSegments(),\n  ...s3.getSegments()\n]);\n\ntape('SPLITS STORAGE / should return a list of unique segment names', assert => {\n  const storage = new SplitsStorage;\n\n  storage.update([s1, s2, s3]);\n\n  let allMustBePresent = true;\n  for (let segment of storage.getSegments()) {\n    allMustBePresent = allMustBePresent && mergedSegments.has(segment);\n  }\n\n  // RangeError: Maximum call stack size exceeded.\n  // assert.deepEqual(storage.getSegments(), mergedSegments, 'all the segment names should be included');\n\n  assert.true(allMustBePresent, 'all the segment names should be included');\n  assert.end();\n});\n\ntape('SPLITS STORAGE / get by split name', assert => {\n  const storage = new SplitsStorage;\n\n  storage.update([s1, s2, s3]);\n\n  assert.equal(storage.get('sample_01'), s1, 'should be the same object');\n  assert.equal(storage.get('sample_02'), s2, 'should be the same object');\n  assert.equal(storage.get('sample_03'), s3, 'should be the same object');\n  assert.end();\n});\n"]}