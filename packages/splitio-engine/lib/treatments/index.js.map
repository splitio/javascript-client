{"version":3,"sources":["../../es6/treatments/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAM,YAAY,QAAQ,qCAAR,CAAZ;;AAEN,SAAS,UAAT,CAAoB,2BAApB,EAAiD,+BAAjD,EAAkF;AAChF,MAAI,EAAE,gBAAgB,UAAhB,CAAF,EAA+B;AACjC,WAAO,IAAI,UAAJ,CAAe,MAAf,EAAuB,UAAvB,CAAP,CADiC;GAAnC;;AAIA,MAAI,OAAO,OAAO,MAAP,GAAgB,CAAhB,CAAP,KAA8B,GAA9B,EAAmC;AACrC,UAAM,IAAI,UAAJ,CAAe,mCAAf,CAAN,CADqC;GAAvC;;AAIA,OAAK,OAAL,GAAe,MAAf,CATgF;AAUhF,OAAK,WAAL,GAAmB,UAAnB,CAVgF;CAAlF;;AAaA,WAAW,KAAX,GAAmB,SAAS,KAAT,CAAe,+BAAf,mBAAkE;qBACxD,KAAK,MAAL,CAAY,UAAC,KAAD,EAAQ,KAAR,EAAkB;QAClD,OAAmB,MAAnB,KADkD;QAC5C,YAAa,MAAb,UAD4C;;;AAGvD,UAAM,MAAN,CAAa,IAAb,CAAkB,MAAM,GAAN,IAAa,IAAb,CAAlB,CAHuD;AAIvD,UAAM,UAAN,CAAiB,IAAjB,CAAsB,SAAtB,EAJuD;;AAMvD,WAAO,KAAP,CANuD;GAAlB,EAOpC;AACD,SAAK,CAAL;AACA,YAAQ,EAAR;AACA,gBAAY,EAAZ;GAVyB,EADwD;;MAC9E,6BAD8E;MACtE,qCADsE;;;AAcnF,SAAO,IAAI,UAAJ,CAAe,MAAf,EAAuB,UAAvB,CAAP,CAdmF;CAAlE;;AAiBnB,WAAW,SAAX,CAAqB,eAArB,GAAuC,SAAS,eAAT,CAAyB,eAAzB,eAAwD;AAC7F,MAAI,IAAI,CAAJ,IAAS,IAAI,GAAJ,EAAS;AACpB,UAAM,IAAI,UAAJ,CAAe,0CAAf,CAAN,CADoB;GAAtB;;;;;;;;;AAD6F,MAYvF,QAAQ,UAAU,KAAK,OAAL,EAAc;WAAS,KAAK,KAAL;GAAT,CAAhC,CAZuF;AAa7F,MAAM,YAAY,KAAK,WAAL,CAAiB,KAAjB,CAAZ,CAbuF;;AAe7F,SAAO,SAAP,CAf6F;CAAxD;;AAkBvC,OAAO,OAAP,GAAiB,UAAjB","file":"index.js","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n/*::\n  type PartitionDTO = {\n    treatment: string,\n    size: number\n  }\n*/\n\n//\n// [1] Transpilation process is not doing a good job infering which \"polyfills\"\n// are required at runtime, so we end doing this kind of lodash style expressions\n// using core-js.\n//\nconst findIndex = require('core-js/library/fn/array/find-index');\n\nfunction Treatments(ranges /*: array<number> */, treatments /*: array<string> */) {\n  if (!(this instanceof Treatments)) {\n    return new Treatments(ranges, treatments);\n  }\n\n  if (ranges[ranges.length - 1] !== 100) {\n    throw new RangeError('Provided invalid dataset as input');\n  }\n\n  this._ranges = ranges;\n  this._treatments = treatments;\n}\n\nTreatments.parse = function parse(data /*: array<PartitionDTO> */) /*: Treatments */ {\n  let {ranges, treatments} = data.reduce((accum, value) => {\n    let {size, treatment} = value;\n\n    accum.ranges.push(accum.inc += size);\n    accum.treatments.push(treatment);\n\n    return accum;\n  }, {\n    inc: 0,\n    ranges: [],\n    treatments: []\n  });\n\n  return new Treatments(ranges, treatments);\n};\n\nTreatments.prototype.getTreatmentFor = function getTreatmentFor(x /*: number */) /*: string */ {\n  if (x < 0 || x > 100) {\n    throw new RangeError('Please provide a value between 0 and 100');\n  }\n\n  // Readme [1]\n  // We need to manually add any dependency which escape of dummy resolution\n  // I'll deal with this in a future release\n  // for (let [k, r] of this._ranges.entries()) {\n  //   if (x <= r) return this._treatments[k];\n  // }\n\n  const index = findIndex(this._ranges, range => x <= range);\n  const treatment = this._treatments[index];\n\n  return treatment;\n};\n\nmodule.exports = Treatments;\n"]}