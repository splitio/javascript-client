{"version":3,"sources":["../../../../es6/factory/sdk/offline/base.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,IAAM,MAAM,QAAQ,OAAR,EAAiB,iBAAjB,CAAN;;AAEN,IAAM,kBAAkB,qBAAlB;AACN,SAAS,mBAAT,CAA6B,GAA7B,EAAkC;AAChC,SAAO,CAAC,gBAAgB,IAAhB,CAAqB,GAArB,CAAD,CADyB;CAAlC;;AAIA,SAAS,cAAT,CAAwB,QAAxB,EAAkC;uBACb,sBAAc;AAC/B,cAAU,EAAV;GADiB,EAEhB,QAFgB,EADa;;MAC1B,mCAD0B;;;AAKhC,MAAI,wCAAJ,EALgC;;;;;;;AAOhC,oDAA8B,uBAAe,QAAf,SAA9B,oGAAwD;;;UAA9C,sBAA8C;UAAxC,2BAAwC;;AACtD,UAAI,oBAAoB,IAApB,CAAJ,EAA+B;AAC7B,6CAEqB,+CACO,yBAH5B,EAD6B;AAQ7B,eAAO,SAAS,IAAT,CAAP,CAR6B;OAA/B;;AAWA,UAAI,oBAAoB,SAApB,CAAJ,EAAoC;AAClC,0CAEkB,+BAA0B,6CAClB,wDAH1B,EADkC;AAOlC,eAAO,SAAS,IAAT,CAAP,CAPkC;OAApC;KAZF;;;;;;;;;;;;;;GAPgC;;AA8BhC,MAAI,qBAAqB,kBAAQ,OAAR,CAAgB,SAAhB,CAArB,CA9B4B;;AAgChC,SAAO;AACL,wCAAa,KAAK,aAAa;;AAE7B,UAAI,YAAY,SAAS,WAAT,CAAZ,CAFyB;;AAI7B,aAAO,OAAO,SAAP,KAAqB,QAArB,GAAgC,SAAhC,GAA4C,SAA5C,CAJsB;KAD1B;AAOL,4BAAQ;AACN,aAAO,kBAAP,CADM;KAPH;GAAP,CAhCgC;CAAlC;;AA6CA,OAAO,OAAP,GAAiB,cAAjB","file":"base.js","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nconst log = require('debug')('splitio:offline');\n\nconst validIdentifier = /^[a-z][-_a-z0-9]*$/i;\nfunction isIdentifierInvalid(str) {\n  return !validIdentifier.test(str);\n}\n\nfunction offlineFactory(settings) {\n  let { features } = Object.assign({\n    features: {}\n  }, settings);\n\n  log('Running Split in Off-the-grid mode!!!!');\n\n  for (let [name, treatment] of Object.entries(features)) {\n    if (isIdentifierInvalid(name)) {\n      log(\n`>\n>> Invalid feature name \"${name}\"\n>>>> Please check you are using ${validIdentifier}\n>\n`\n      );\n      delete features[name];\n    }\n\n    if (isIdentifierInvalid(treatment)) {\n      log(\n`>\n>> Invalid treatment \"${treatment}\" in feature \"${name}\"\n>> Please check you are using ${validIdentifier} ('control' is a reserved word)\n>`\n      );\n      delete features[name];\n    }\n  }\n\n  let alwaysReadyPromise = Promise.resolve(undefined);\n\n  return {\n    getTreatment(key, featureName) {\n      // always the latest parameter is the feature name.\n      let treatment = features[featureName];\n\n      return typeof treatment !== 'string' ? 'control' : treatment;\n    },\n    ready() {\n      return alwaysReadyPromise;\n    }\n  };\n}\n\nmodule.exports = offlineFactory;\n"]}