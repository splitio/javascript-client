## 9.3.7 (Nov XX, 2017)

* Adding support for client.track method, for tracking custom events.

## 9.3.6 (Oct 12, 2017)

* Fixed an issue that was not rejecting client.ready() on SDK_READY_TIMED_OUT event.
* Fixed an issue where the SDK required a key even on localhost mode.
* Added custom message for 404 errors.
* Updated TypeScript declaration files for exposing startup settings on NodeJS.

## 9.3.5 (Sep 13, 2017)

* Internal context module added. The idea was to reduce the amount of parameters flowing through the different functions.
* Removed /src folder and some misc files from NPM package.
* Dependencies update & cleanup.

## 9.3.4 (Aug 23, 2017)

* Removed FullStory integration. It was causing an issue when FS was not yet ready.

## 9.3.3 (Aug 15, 2017)

* Improved metrics collection. Now we report the complete set of them. (Browser only reports first fetch)

## 9.3.2 (Aug 9, 2017)

* Adding support for Node v0.10.X

## 9.3.1 (Jul 28, 2017)

* Bugfixing - Fixed a bug on Manager API which was not retrieving the right treatments for a Split on some cases.

## 9.3.0 (Jul 25, 2017)

Several new matchers have been released:

  * Dependency Matchers
  * Boolean Matchers
  * Regex Matchers

## 9.2.2 (Jul 20, 2017)

* Bugfixing - Added support into the SDK to flush impressions before destroy the instance.

## 9.2.1 (May 19, 2017)

* Bugfixing - Issue with dependency that exposes untranspiled code through cjs require, causes
  problems on IE and Node 3.

## 9.2.0 (May 11, 2017)

* Dropped migration build. Migration packages will no longer receive updates.
* Updated logging functionality. SDK will handle logging with a minimalistic enable/disable approach.
  Now you have three ways to enable/disable SDK logging:

  1. By setting the localStorage.splitio_debug (browser) or SPLITIO_DEBUG environment var (node)
    with 'on', 'enable' or 'enabled'.

  2. By passing an extra setting when instantiating the SDK.

    ```js
    var splitio = require('@splitsoftware/splitio');

    var settings = {
      core: {
        authorizationKey: 'YOUR_API_KEY',
        key: 'CUSTOMER_KEY'  // If on the browser.
      },
      debug: true  // Boolean flag for enabling logs. Default value is false.
    };

    var sdk = splitio(settings);
    ```

  3. By calling the SDK Logger API (no need for browser refresh):

    ```js
    var splitio = require('@splitsoftware/splitio');

    var sdk = splitio({
      core: {
        authorizationKey: 'YOUR_API_KEY',
        key: 'CUSTOMER_KEY'  // If on the browser.
      }
    });

    // Logger API.
    sdk.Logger.enable();
    sdk.Logger.disable();
    ```

* Added Time Tracker logs. When logs are enabled, we log how much time takes to complete
  SDK important tasks, like getting ready, downloading important information or pushing
  metrics and impressions to Split.
* Bugfixing - Return correct label when consulted Split is not found.

## 9.1.1 (May 03, 2017)

* Bugfixing - Fixed invalid behaviour when using native Fetch API and comparing statusText
  instead of resp.ok

## 9.1.0 (April 21, 2017)

* Adding support for STRING matchers.

## 9.0.0 (April 17, 2017)

* Adding support for SET matchers.

## 8.2.0 (April 12, 2017)

* Added Traffic Allocation support. You can specify how much of your traffic you
  want to send to the rollout plan of a Split via Split Editor.

* Added support for murmur hashing algorithm for better bucket calculations.

* Adding getTreatments method to client API. For example:

```js
var treatmentsMap = client.getTreatments('CUSTOMER_KEY', ['Split_1', 'Split_2']);

/*
* treatmentsMap will be an object mapping splits with treatments. For example:
* {
*   Split_1: 'on',
*   Split_2: 'off
* }
*/
```

## 8.1.0 (March 30, 2017)

Added typescript support. SplitSDK custom types live on the SplitIO namespace.

For example:

```ts
const myTreatment: SplitIO.Treatment;
const myBrowserSettings: SplitIO.IBrowserSettings;
```

## 8.0.0 (March 10, 2017)

* New API to improve development experience. We added a migration layer so you
  could use the new version of the SDK and make the migration when you have
  time.

* NodeJS now added support for Redis to keep consistency across multiple SDK
  instances.

* Added Manager API to query the state of the SDK.

* In Browser land, we can now enable localStorage as backend so we can reload
  the SDK quickly without downloading all the data again.

* Added support for offline changes release to improve development experience,
  specially in NodeJS where we used to have a server running and spin it up each
  time we change a treatment is a headache.

## 7.4.0 (January 23, 2017)

Exposed internal event SDK_SPLITS_ARRIVED to allow customers to monitor partial
readiness of the SDK.

## 7.3.0 (January 19, 2017)

### Added bucketing key support

Sometimes you want to have annonymous users but been able to track them as
users after a authentication process. Having this in mind, we provide a way to
generate treatments using a fixed key (bucketing key), while been able to change
the matching key without problem, so you can garantice a consistent experience
without been worried about the matching key.

```
var sdk = splitio({
  core: {
    authorizationKey: '<your-token>',
    key: {
      matchingKey: '<your-usual-key>',
      bucketingKey: '<a-new-key-for-calculate-the-treatment>'
    }
  }
});
```

### Added labels support

In order to improve visibility in what is happening while doing a matching, we
are collecting by default some extra information while doing a getTreatment
call. The information includes:

1. Which condition has been matched?
2. Which SDK language & version has generated the impression?
3. If you are running NodeJS, we are adding machine name and ip so you could
   track evaluations in a cluster.

## 7.1.1 (November 16, 2016)

* In some particular combinations of NodeJS / OS the
  `require('@splitsoftware/splitio')` could fail. Added a workaround to fix the
  problem.

## 7.1.0 (November 15, 2016)

* Bug fixing release. Reported an error with ember-browserify due to an
  incorrect reference to the core files.
* Development dependencies updated to latest. No breaking changes during the
  migration.

## 7.0.1 (September 16, 2016)

* Added missing support for UMD.
* Added more information in the README for easily installation.

## 6.0.1 (June 24, 2016)

* Critical bug fixed which prevent ready state of the SDK.

## 6.0.0 (June 24, 2016)

* In the browser land, it's important to have quick retries before after a
  stretch timeouts. We added new configurations to handle this.
* Added the concept of 'ready timeout', so you could take a controlled action if
  the SDK is taking too much time doing the startup.
* Fixed few bugs, specially for the browser release.
* `.ready()` method is deprecated in favor of
  `sdk.on(sdk.Event.SDK_READY, function onReady() { do something; })`

## 5.1.1 (June 13, 2016)

* Added missing support for events in offline mode (NodeJS and Browser).

## 5.1.0 (June 9, 2016)

* Bug fixing release.

## 5.0.0 (June 6, 2016)

* Added support for multiple instances. Now we can call the SDK factory multiple
  times.
* SDK instances inherit from EventEmitter. For now we only notifies state changes
  so you could ask the instance to evaluates `getTreatment` to reflect changes
  in your system.

## 4.0.0 (April 13, 2016)

* Refactored offline mode. No more url changes required to switch to development
  mode.

## 3.0.0 (April 10, 2016)

* Attributes support.

## 2.1.0 (March 29, 2016)

* Internal improvements. It's safe to upgrade without making code changes.

## 2.0.0 (March 21, 2016)

* Improved configurations in order to help developers, now all the refresh rates
  are in *seconds* instead of *milliseconds*.

* Updated defaults refresh rates with better ones.

## 1.0.1 (March 16, 2016)

* No changes made.

## 1.0.0 (March 15, 2016)

* Initial public release
