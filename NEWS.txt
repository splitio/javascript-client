## 10.3.3 (Aug 8, 2018)

* Removing logplease dependency hosted on GitHub.

## 10.3.2 (Jun 19, 2018)

* Updating logging utility check for Node environments

## 10.3.1 (Jun 4, 2018)

* Added events npm package as a dependency, since when building on top of
  non-Node environments, the native node events module is not available.

## 10.3.0 (May 10, 2018)

* Input and output validations. Improved how the sdk validate, log erros and
  parse key property, validate and log errors on .getTreatment, .track and
  .manager methods.
* GetTreatment method will return 'control' and label exception if key is invalid.
  Also it will log a nice error to help in the debugging and will not push any
  impressions to the BE.
* Track method and Manager method will return false if any of it's arguments are
  invalid, logging a nice and descriptive error.
* Fixed memory leak on events factory, there were a setTimeout that was never
  removed from the stack.
* Improved bunchs of UTs for the node sdk, still we need to continue improving
  unit tests for this.
* TS declarations now accept boolean properties on Attributes.

## 10.2.0 (April 3, 2018)

* Added greenkeeper configuration within package.json.
* Updated several libraries versions:
  . babel-loader
  . babel-plugin-istanbul
  . babel-plugin-transform-runtime
  . babel-preset-env
  . copyfiles
  . cross-env
  . eslint
  . karma-firefox-launcher
  . karma-phantomjs-launcher
  . rimraf
  . sinon
  . tape
  . types/node
  . axios
  . core-js
  . ip
  . lodash
  . ioredis

* Removed global Promise polyfill.

## 10.1.1 (March 20, 2018)

* Bugfixing - SDK with REDIS storage issue. Previously, if there was a Redis Error,
  the SDK method 'getTreatment' would never resolve or reject. With the fix, now
  'getTreatment' call will  return treatment 'control' and will register a
  impressions with label 'exception'.

## 10.1.0 (March 8, 2018)

* Replaced isomorphic-fetch with axios.

  Isomorphic-fetch was deprecated, and many dependencies have updated, so and
  old lib with updated dependencies is causing trouble.
  Libraries evolve all the time so libraries that depend on these one have been
  updated, so the usage of inner dependencies can break the old implementation
  of this deprecated lib, since nobody took anymore the time to update it.
  For example, node-fetch is used by isomorphic-fetch (currently deprecated),
  but node-fetch is not deprecated, so devs are still making implementations
  changes to node-fetch. New version of node-fetch are released, and
  isomorphic-fetch updates to that node-fetch new version, but no one updates
  the implementation of isomorphic-fetch. If node-fetch introduces breaking
  changes, isomorphic-fetch has to be updated, but it is deprecated,
  so it might break.
  Axios is a promise based HTTP client for the browser and node.js. This library
  give us the possibility to cancel request, has a built-in XSRF protection,
  has transformers that allow performing transforms on data before request
  is made or after response is received and interceptors that allow us to
  alter the request or response entirely (headers as well), also perform async
  operations before request is made or before Promise settles.

## 10.0.0 (Feb 26, 2018)

* Migrated source code to es modules.

We migrated our source code to ESM and exposed
a new way to import our SDK to take
advantage of the ESM modules.

Before v10 we expose a function
```js
import splitio from '@splitsoftware/splitio';

const sdk = splitio(settings);
```

In V10 we expose an object with SplitFactory as a factory function to be consumed.
```js
import { SplitFactory } from '@splitsoftware/splitio';

const sdk = SplitFactory(settings);
```

For UMD build we continue exporting the same factory function

```html
<script src="//cdn.split.io/split-10.0.0.min.js"></script>
```

```js
const sdk = window.splitio(settings);

// or

const sdk = splitio(settings);
```

* Localhost mode uses fewer dependencies now.
* Removed flowtype since it was not used anymore.
* Udpated to last node 8.9.4 LTS.
* Added package-lock.json.
* Improved eslint configuration.

## 9.4.0 (Jan 12, 2018)

* Adding support for client.track method, for tracking custom events.
* Adding trafficType as an optional core setting. If provided on the browser it will be binded to the client as the key.
* TypeScript declarations polishing.
* Updated SDK labels.
* Bugfixing - Shared clients (browser) were ready even if the main client was not.
* Bugfixing - Shared clients (browser) from different SDK instances should be separate.
* Bugfixing - When using API key with wrong permissions, Node was throwing a false ready event (without segments).
* Bugfixing - Localhost mode was trying to flush impressions when client.destroy was invoked.

## 9.3.7 (Dec 22, 2017)

* Updated SDK labels to better align with Simplified Editor.

## 9.3.6 (Oct 12, 2017)

* Fixed an issue that was not rejecting client.ready() on SDK_READY_TIMED_OUT event.
* Fixed an issue where the SDK required a key even on localhost mode.
* Added custom message for 404 errors.
* Updated TypeScript declaration files for exposing startup settings on NodeJS.

## 9.3.5 (Sep 13, 2017)

* Internal context module added. The idea was to reduce the amount of parameters flowing through the different functions.
* Removed /src folder and some misc files from NPM package.
* Dependencies update & cleanup.

## 9.3.4 (Aug 23, 2017)

* Removed FullStory integration. It was causing an issue when FS was not yet ready.

## 9.3.3 (Aug 15, 2017)

* Improved metrics collection. Now we report the complete set of them. (Browser only reports first fetch)

## 9.3.2 (Aug 9, 2017)

* Adding support for Node v0.10.X

## 9.3.1 (Jul 28, 2017)

* Bugfixing - Fixed a bug on Manager API which was not retrieving the right treatments for a Split on some cases.

## 9.3.0 (Jul 25, 2017)

Several new matchers have been released:

  * Dependency Matchers
  * Boolean Matchers
  * Regex Matchers

## 9.2.2 (Jul 20, 2017)

* Bugfixing - Added support into the SDK to flush impressions before destroy the instance.

## 9.2.1 (May 19, 2017)

* Bugfixing - Issue with dependency that exposes untranspiled code through cjs require, causes
  problems on IE and Node 3.

## 9.2.0 (May 11, 2017)

* Dropped migration build. Migration packages will no longer receive updates.
* Updated logging functionality. SDK will handle logging with a minimalistic enable/disable approach.
  Now you have three ways to enable/disable SDK logging:

  1. By setting the localStorage.splitio_debug (browser) or SPLITIO_DEBUG environment var (node)
    with 'on', 'enable' or 'enabled'.

  2. By passing an extra setting when instantiating the SDK.

    ```js
    var splitio = require('@splitsoftware/splitio');

    var settings = {
      core: {
        authorizationKey: 'YOUR_API_KEY',
        key: 'CUSTOMER_KEY'  // If on the browser.
      },
      debug: true  // Boolean flag for enabling logs. Default value is false.
    };

    var sdk = splitio(settings);
    ```

  3. By calling the SDK Logger API (no need for browser refresh):

    ```js
    var splitio = require('@splitsoftware/splitio');

    var sdk = splitio({
      core: {
        authorizationKey: 'YOUR_API_KEY',
        key: 'CUSTOMER_KEY'  // If on the browser.
      }
    });

    // Logger API.
    sdk.Logger.enable();
    sdk.Logger.disable();
    ```

* Added Time Tracker logs. When logs are enabled, we log how much time takes to complete
  SDK important tasks, like getting ready, downloading important information or pushing
  metrics and impressions to Split.
* Bugfixing - Return correct label when consulted Split is not found.

## 9.1.1 (May 03, 2017)

* Bugfixing - Fixed invalid behaviour when using native Fetch API and comparing statusText
  instead of resp.ok

## 9.1.0 (April 21, 2017)

* Adding support for STRING matchers.

## 9.0.0 (April 17, 2017)

* Adding support for SET matchers.

## 8.2.0 (April 12, 2017)

* Added Traffic Allocation support. You can specify how much of your traffic you
  want to send to the rollout plan of a Split via Split Editor.

* Added support for murmur hashing algorithm for better bucket calculations.

* Adding getTreatments method to client API. For example:

```js
var treatmentsMap = client.getTreatments('CUSTOMER_KEY', ['Split_1', 'Split_2']);

/*
* treatmentsMap will be an object mapping splits with treatments. For example:
* {
*   Split_1: 'on',
*   Split_2: 'off
* }
*/
```

## 8.1.0 (March 30, 2017)

Added typescript support. SplitSDK custom types live on the SplitIO namespace.

For example:

```ts
const myTreatment: SplitIO.Treatment;
const myBrowserSettings: SplitIO.IBrowserSettings;
```

## 8.0.0 (March 10, 2017)

* New API to improve development experience. We added a migration layer so you
  could use the new version of the SDK and make the migration when you have
  time.

* NodeJS now added support for Redis to keep consistency across multiple SDK
  instances.

* Added Manager API to query the state of the SDK.

* In Browser land, we can now enable localStorage as backend so we can reload
  the SDK quickly without downloading all the data again.

* Added support for offline changes release to improve development experience,
  specially in NodeJS where we used to have a server running and spin it up each
  time we change a treatment is a headache.

## 7.4.0 (January 23, 2017)

Exposed internal event SDK_SPLITS_ARRIVED to allow customers to monitor partial
readiness of the SDK.

## 7.3.0 (January 19, 2017)

### Added bucketing key support

Sometimes you want to have annonymous users but been able to track them as
users after a authentication process. Having this in mind, we provide a way to
generate treatments using a fixed key (bucketing key), while been able to change
the matching key without problem, so you can garantice a consistent experience
without been worried about the matching key.

```
var sdk = splitio({
  core: {
    authorizationKey: '<your-token>',
    key: {
      matchingKey: '<your-usual-key>',
      bucketingKey: '<a-new-key-for-calculate-the-treatment>'
    }
  }
});
```

### Added labels support

In order to improve visibility in what is happening while doing a matching, we
are collecting by default some extra information while doing a getTreatment
call. The information includes:

1. Which condition has been matched?
2. Which SDK language & version has generated the impression?
3. If you are running NodeJS, we are adding machine name and ip so you could
   track evaluations in a cluster.

## 7.1.1 (November 16, 2016)

* In some particular combinations of NodeJS / OS the
  `require('@splitsoftware/splitio')` could fail. Added a workaround to fix the
  problem.

## 7.1.0 (November 15, 2016)

* Bug fixing release. Reported an error with ember-browserify due to an
  incorrect reference to the core files.
* Development dependencies updated to latest. No breaking changes during the
  migration.

## 7.0.1 (September 16, 2016)

* Added missing support for UMD.
* Added more information in the README for easily installation.

## 6.0.1 (June 24, 2016)

* Critical bug fixed which prevent ready state of the SDK.

## 6.0.0 (June 24, 2016)

* In the browser land, it's important to have quick retries before after a
  stretch timeouts. We added new configurations to handle this.
* Added the concept of 'ready timeout', so you could take a controlled action if
  the SDK is taking too much time doing the startup.
* Fixed few bugs, specially for the browser release.
* `.ready()` method is deprecated in favor of
  `sdk.on(sdk.Event.SDK_READY, function onReady() { do something; })`

## 5.1.1 (June 13, 2016)

* Added missing support for events in offline mode (NodeJS and Browser).

## 5.1.0 (June 9, 2016)

* Bug fixing release.

## 5.0.0 (June 6, 2016)

* Added support for multiple instances. Now we can call the SDK factory multiple
  times.
* SDK instances inherit from EventEmitter. For now we only notifies state changes
  so you could ask the instance to evaluates `getTreatment` to reflect changes
  in your system.

## 4.0.0 (April 13, 2016)

* Refactored offline mode. No more url changes required to switch to development
  mode.

## 3.0.0 (April 10, 2016)

* Attributes support.

## 2.1.0 (March 29, 2016)

* Internal improvements. It's safe to upgrade without making code changes.

## 2.0.0 (March 21, 2016)

* Improved configurations in order to help developers, now all the refresh rates
  are in *seconds* instead of *milliseconds*.

* Updated defaults refresh rates with better ones.

## 1.0.1 (March 16, 2016)

* No changes made.

## 1.0.0 (March 15, 2016)

* Initial public release
